type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {

        final String[] script = new String[]{
                "incorrect-statement",
                "correct-statement",
                "complete-scenario",
                "facts-and-question"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }

  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/GuessingApplication.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;
    import java.util.Scanner;

    public class GuessingApplication implements GuessGame {

        private Greet greet;

        public void greet() {

            LocalTime time = LocalTime.now();
            LocalTime beginOfDay = LocalTime.parse("05:00:00");
            LocalTime eob = LocalTime.parse("18:00:00");

            if (time.isAfter(beginOfDay) && time.isBefore(LocalTime.NOON)) {
                greet = Greet.MORNING;
            } else if (time.isAfter(LocalTime.NOON) && time.isBefore(eob)) {
                greet = Greet.AFTERNOON;
            } else if (time.isAfter(eob)) {
                greet = Greet.EVENING;
            } else if (time.isAfter(LocalTime.MIDNIGHT) && time.isBefore(beginOfDay)) {
                greet = Greet.NIGHT_OWL;
            } else if (time.isAfter(beginOfDay) && time.getHour() < 9) {
                greet = Greet.EARLY_BIRD;
            }

            System.out.println(greet.getMessage());
        }

        public void guess() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("\nEnter an animal:");
            String text = scanner.nextLine().trim().toLowerCase();
            String[] inputs = text.split("\\s");

            String animal;
            if (inputs[0].matches("an?")) {
                animal = text;
            } else {
                animal = text.startsWith("the") ? inputs[1] : text;
                animal = GuessUtils.addDeterminant(animal);
            }

            System.out.printf("Is it %s?\n", animal);

            String answer;

            while (true) {
                answer = scanner.nextLine().trim().toLowerCase().replaceFirst("[.!?]", "");

                if (GuessUtils.validResponse().negate().test(answer)) {
                    System.out.println(GuessUtils.getRandomClarificationQuestion());
                } else {
                    System.out.printf("You answered: %s\n%n", GuessUtils.isPositiv().test(answer) ? "Yes" : "No");
                    System.out.println(GuessUtils.getGoodbyeMessage());
                    return;
                }
            }
        }

        @Override
        public void run() {
            start();
        }
    }
  learner_created: true
- name: test/correct-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test correct statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all correct statements from data file
    #
    - [input, "{0}"]
    - - contains
      - correct for a dog?
      - The program should clarify if the statement is correct for a dog.
  learner_created: false
- name: test/incorrect-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the reaction to incorrect statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all incorrect statements from data file
    #
    - [input, "{0}"]
    - - contains
      - "examples of a statement"
      - "The statement \"{0}\" doesn't fit the template. The program should show examples and ask the user again."
  learner_created: false
- name: test/complete-scenario.data.yaml
  visible: false
  text: |
    #
    # The data for the complete scenario from the start to the finish
    #
    ---
    - - "cat"
      - "DOG"
      - "a cat"
      - "a dog"
      - "It can climb trees"
      - "ha"
      - "no"
      - "The cat can climb trees"
      - "The dog can't climb trees"
      - "Can it climb trees?"

    - - "hare"
      - "wolf"
      - "a hare"
      - "a wolf"
      - "It is a shy animal"
      - "nej"
      - "no"
      - "The hare is a shy animal"
      - "The wolf isn't a shy animal"
      - "Is it a shy animal?"

    - - "a lynx"
      - "an unicorN"
      - "a lynx"
      - "an unicorn"
      - "It is a fabulous animal?"
      - "of c"
      - "yes"
      - "The lynx isn't a fabulous animal"
      - "The unicorn is a fabulous animal"
      - "Is it a fabulous animal?"
  learner_created: false
- name: test/incorrect-statement.data.yaml
  visible: false
  text: |
    #
    # All of these statements are wrong.
    #
    ---
    - - "The dog barks"
    - - "The cat meows"
    - - "I don't know..."
    - - "Who knows?"
    - - "It flies"
    - - "It barks"
    - - "Can it fly?"
    - - "It fly"
    - - "may be it barks?"
    - - "I do not what to say..."
  learner_created: false
- name: test/facts-and-question.data.yaml
  visible: false
  text: |
    #
    # This is a data file to test generated facts and a question
    #

    # --- user input ---
    # The first animal
    # The second animal
    # The statement
    # Is the statement correct for the second animal?

    # --- expected output ---
    # The fact for the first animal
    # The fact for the second animal
    # The closed question to distinguishes one animal from other
    ---
    - - cat
      - shark
      - it is a mammal
      - no
      - "The cat is a mammal."
      - "The shark isn't a mammal."
      - "Is it a mammal?"

    - - wolf
      - hare
      - it is a shy animal
      - yes
      - "The wolf isn't a shy animal."
      - "The hare is a shy animal."
      - "Is it a shy animal?"


    - - wolf
      - fox
      - it has a long bushy tail
      - yes
      - "The wolf doesn't have a long bushy tail."
      - "The fox has a long bushy tail."
      - "Does it have a long bushy tail?"

    - - dog
      - cat
      - it can climb trees
      - yes
      - "The dog can't climb trees."
      - "The cat can climb trees."
      - "Can it climb trees?"

    - - dog
      - fox
      - it is living in the forest
      - yes
      - "The dog isn't living in the forest."
      - "The fox is living in the forest."
      - "Is it living in the forest?"
  learner_created: false
- name: test/correct-statement.data.yaml
  visible: false
  text: |
    ---
    - - "It is a mammal"
    - - "It can barks"
    - - "It has a tail"
    - - "IT IS A SHY ANIMAL"
    - - "it CAN swim and fly"
    - - "it has long tooth."
    - - "iT has five legs"
    - - "It can catch a mouse."
    - - "it is a danger predator."
    - - "It is living in the forest."
  learner_created: false
- name: test/complete-scenario.script.yaml
  visible: false
  text: |-
    #
    # This script emulate complete sessions from start to the finish
    #
    ---
    - [start]
    - [contains, first animal, The program should asks the user for an first animal name]
    - [input, "{0}"]
    - [contains, second animal, The program should asks the user for an second animal name]
    - [input, "{1}"]
    - - contains
      - "Specify a fact that distinguishes {2} from {3}."
      - The program should asks the user for a fact
    - [input, "{4}"]
    - - contains
      - "correct for {3}?"
      - "The program should clarify if the statement is correct for {3}."
    #
    # Here the user unclear answer and the program should ask again
    #
    - [input, "{5}"]
    - - contains
      - yes or no
      - "The user input {5} should not be recognized as correct answer. The program should ask the user again."
    #
    # Here the user answer correctly
    #
    - [input, "{6}"]
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{7}"
      - The program should generate a fact about the first animals.
    - - contains
      - "{8}"
      - The program should generate a fact about the second animals.
    - - contains
      - "{9}"
      - The program should generate a closed question.
    - - finish
      - The program should finish after the correct response.
  learner_created: false
- name: test/facts-and-question.script.yaml
  visible: false
  text: |-
    #
    # This script to test generation of facts and a question
    #
    ---
    - [start]
    #
    # Here we send to the input the names of two animals and the statement.
    #
    - [input, "{0}"]  # The first animal
    - [input, "{1}"]  # The second animal
    - [input, "{2}"]  # The statement
    - [input, "{3}"]  # Is the statement correct for the second animal?
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{4}"
      - "The program should generate a fact about {0}. The fact should be “{4}“."

    - - contains
      - "{5}"
      - "The program should generate a fact about {1}. The fact should be “{5}“."

    - - contains
      - "{6}"
      - "The program should generate a closed question: “{6}“ from statement “{2}“."

    - [finish, The program should finish.]
  learner_created: false
- name: src/animals/utils/GuessInput.java
  visible: true
  learner_created: true
- name: src/animals/utils/GuessUtils.java
  visible: true
  text: |
    package animals;

    import java.util.List;
    import java.util.concurrent.ThreadLocalRandom;
    import java.util.function.Predicate;

    public class GuessUtils {

        private static final List<String> POSITIVE_RESPONSES = List.of("y", "yes", "yeah", "yep", "sure", "right",
                "affirmative", "correct", "indeed", "you bet", "exactly", "you said it");

        private static final List<String> NEGATIVE_ANSWERS = List.of("n", "no", "no way", "nah", "nope", "negative",
                "I don't think so", "yeah no");

        private static final List<String> CLARIFICATION_QUESTIONS = List.of(
                "I'm not sure I caught you: was it yes or no?",
                "Funny, I still don't understand, is it yes or no?",
                "Oh, it's too complicated for me: just tell me yes or no.",
                "Could you please simply say yes or no?",
                "Oh, no, don't try to confuse me: say yes or no.");

        private static final List<String> GOODBYE_PHRASES = List.of("Bye!", "Goodbye", "See you soon!", "See you later!",
                "Bye! Have a good day.", "Bye! Take care.", "Bye! Take it easy.", "It was greet to speech with you, but I've to go. Goodbye!");

        public static String addDeterminant(String animal) {
            return String.format("%s %s", startsWithVowel(animal) ? "an" : "a", animal);
        }

        public static Predicate<String> validResponse() {
            return answer -> POSITIVE_RESPONSES.contains(answer) || NEGATIVE_ANSWERS.contains(answer);
        }

        public static String getRandomClarificationQuestion() {
            int idx = ThreadLocalRandom.current().nextInt(0, CLARIFICATION_QUESTIONS.size() - 1);

            return CLARIFICATION_QUESTIONS.get(idx);
        }

        public static Predicate<String> isPositiv() {
            return POSITIVE_RESPONSES::contains;
        }

        public static String getGoodbyeMessage() {
            int idx = ThreadLocalRandom.current().nextInt(0, CLARIFICATION_QUESTIONS.size() - 1);

            return GOODBYE_PHRASES.get(idx);
        }

        public static String removeChar(String txt) {
            return txt.replaceFirst("[.!?]", "");
        }

        private static boolean startsWithVowel(String word) {
            return "eaiouy".indexOf(word.charAt(0)) >= 0;
        }
    }
  learner_created: true
- name: src/animals/model/Animal.java
  visible: true
  learner_created: true
- name: src/animals/model/Sentence.java
  visible: true
  learner_created: true
- name: src/animals/domain/QuestionFactory.java
  visible: true
  learner_created: true
- name: src/animals/domain/GreetFactory.java
  visible: true
  learner_created: true
- name: src/animals/core/Greet.java
  visible: true
  text: |
    package animals;

    public enum Greet {

        MORNING("Good morning!"),
        AFTERNOON("Good afternoon!"),
        EVENING("Good evening!"),
        NIGHT_OWL("Hi, Night Owl"),
        EARLY_BIRD("Hi, Early Bird");

        private final String message;

        Greet(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }
    }
  learner_created: true
- name: src/animals/model/Verb.java
  visible: true
  learner_created: true
- name: src/animals/domain/GuessGame.java
  visible: true
  text: |
    package animals;

    public interface GuessGame extends Runnable {

        void greet();
        void guess();

        default void start() {
            greet();
            guess();
        }
    }
  learner_created: true
- name: src/animals/domain/DeterminantFactory.java
  visible: true
  learner_created: true
- name: src/animals/core/AnswerValidator.java
  visible: true
  learner_created: true
- name: src/animals/core/Guess.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11080#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 25 Feb 2023 15:45:53 UTC
record: 2
