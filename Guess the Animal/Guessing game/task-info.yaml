type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "guessing-game"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/utils/GuessUtils.java
  visible: true
  text: |
    package animals.utils;

    import java.util.List;
    import java.util.concurrent.ThreadLocalRandom;

    public class GuessUtils {

        public static final List<String> POSITIVE_RESPONSES = List.of("y", "yes", "yeah", "yep", "sure", "right",
                "affirmative", "correct", "indeed", "you bet", "exactly", "you said it");

        public static final List<String> NEGATIVE_ANSWERS = List.of("n", "no", "no way", "nah", "nope", "negative",
                "I don't think so", "yeah no");

        public static final List<String> CLARIFICATION_QUESTIONS = List.of(
                "I'm not sure I caught you: was it yes or no?",
                "Funny, I still don't understand, is it yes or no?",
                "Oh, it's too complicated for me: just tell me yes or no.",
                "Could you please simply say yes or no?",
                "Oh, no, don't try to confuse me: say yes or no.");

        private static final List<String> GOODBYE_PHRASES = List.of("Bye!", "Goodbye", "See you soon!", "See you later!",
                "Bye! Have a good day.", "Bye! Take care.", "Bye! Take it easy.", "It was greet to speech with you, but I've to go. Goodbye!");

        public static String getGoodbyeMessage() {
            int idx = ThreadLocalRandom.current().nextInt(0, CLARIFICATION_QUESTIONS.size() - 1);

            return GOODBYE_PHRASES.get(idx);
        }
    }
  learner_created: true
- name: src/animals/utils/GuessInput.java
  visible: true
  text: |
    package animals.utils;

    import animals.domain.QuestionFactory;

    import java.util.Scanner;

    public class GuessInput {

        public static String requestInput(String message) {
            System.out.printf("%n%s%n", message);
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

        public static String requestFact(String firstAnimal, String secondAnimal) {

            String message = "Specify a fact that distinguishes %s from %s.\n" +
                    "The sentence should be of the format: 'It can/has/is ...'.%n";
            System.out.printf(message, firstAnimal, secondAnimal);

            return new Scanner(System.in).nextLine().toLowerCase();
        }

        public static String answer() {
            return new Scanner(System.in).nextLine().replaceFirst("[.!?]", "").toLowerCase();
        }

        public static String validFor(String animal) {
            System.out.println(QuestionFactory.correct(animal.toLowerCase()));
            return new Scanner(System.in).nextLine();
        }
    }
  learner_created: true
- name: src/animals/core/AnswerValidator.java
  visible: true
  text: |
    package animals.core;

    import java.util.function.Predicate;

    import static animals.utils.GuessUtils.NEGATIVE_ANSWERS;
    import static animals.utils.GuessUtils.POSITIVE_RESPONSES;

    public class AnswerValidator {

        public static Predicate<String> isPositivResponse() {
            return POSITIVE_RESPONSES::contains;
        }

        public static Predicate<String> isPositivOrNegativeResponse() {
            return answer -> POSITIVE_RESPONSES.contains(answer) || NEGATIVE_ANSWERS.contains(answer);
        }
    }
  learner_created: true
- name: src/animals/model/Verb.java
  visible: true
  text: |
    package animals.model;

    public enum Verb {

        HAS ("doesn't have", "Does it have"),
        IS ("isn't", "Is it"),
        CAN ("can't", "Can it");

        Verb(String negation, String interrogation) {
            this.negation = negation;
            this.interrogation = interrogation;
        }

        private final String negation;
        private final String interrogation;

        public String getNegation() {
            return negation;
        }

        public String getInterrogation() {
            return interrogation;
        }
    }
  learner_created: true
- name: src/animals/core/Guess.java
  visible: true
  text: "package animals.core;\n\nimport animals.domain.DeterminantFactory;\nimport\
    \ animals.domain.QuestionFactory;\nimport animals.model.Animal;\nimport animals.model.Sentence;\n\
    import animals.utils.GuessInput;\nimport animals.utils.GuessUtils;\n\nimport java.util.Scanner;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ Guess {\n    \n    private static Animal firstAnimal;\n    private static Animal\
    \ secondAnimal;\n\n    private static final Scanner scanner = new Scanner(System.in);\n\
    \n    private Guess() {\n    }\n\n    public static Guess init() {\n        return\
    \ new Guess();\n    }\n\n    public void firstAnimal() {\n        System.out.println(\"\
    \\nEnter the first animal:\");\n        firstAnimal = new Animal(DeterminantFactory.removeDeterminant(scanner.nextLine().toLowerCase()));\n\
    \    }\n    \n    public void secondAnimal() {\n        System.out.println(\"\
    Enter the second animal:\");\n        secondAnimal = new Animal(DeterminantFactory.removeDeterminant(scanner.nextLine().toLowerCase()));\n\
    \    }\n    \n    public void guess() {\n        firstAnimal();\n        secondAnimal();\n\
    \        \n        while (true) {\n\n            String sentence = GuessInput.requestFact(firstAnimal.getNameWithDeterminant(),\
    \ secondAnimal.getNameWithDeterminant()).replaceFirst(\"[!?]\", \".\");\n\n  \
    \          final Matcher matcher = getMatcher(sentence);\n\n            if (matcher.find())\
    \ {\n                System.out.println(QuestionFactory.correct(secondAnimal.getNameWithDeterminant()));\n\
    \                String answer = getAnswer();\n\n                String verb =\
    \ matcher.group(1);\n                String fact = matcher.replaceFirst(\"\").trim();\n\
    \                final Sentence competence = new Sentence(String.format(\"%s %s\"\
    , verb, fact));\n                setFact(answer, competence);\n\n            \
    \    String question = QuestionFactory.from(competence.getText());\n         \
    \       System.out.printf(\"I learned the following facts about animals:%n%s%n%s%n\"\
    \ +\n                                \"I can distinguish these animals by asking\
    \ the question:%n- %s%n\\n\",\n                        firstAnimal, secondAnimal,\
    \ question);\n\n                System.out.println(GuessUtils.getGoodbyeMessage());\n\
    \                return;\n            } else {\n                System.out.println(\"\
    The examples of a statement:\\n\" +\n                        \" - It can fly\\\
    n\" +\n                        \" - It has horn\\n\" +\n                     \
    \   \" - It is a mammal\");\n            }\n        }\n    }\n\n    private String\
    \ getAnswer() {\n        String answer = GuessInput.answer();\n\n        while\
    \ (AnswerValidator.isPositivOrNegativeResponse().negate().test(answer)) {\n  \
    \          System.out.println(QuestionFactory.random());\n            answer =\
    \ GuessInput.answer();\n        }\n\n        return answer;\n    }\n\n    private\
    \ Matcher getMatcher(String fact) {\n        final String regex = \"It (can|has|is)\"\
    ;\n\n        final Pattern pattern = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE);\n\
    \        return pattern.matcher(fact);\n    }\n\n    private void setFact(String\
    \ answer, Sentence competence) {\n        boolean correct = AnswerValidator.isPositivResponse().test(answer);\n\
    \n        if (correct) {\n            firstAnimal.setFact(competence.negate());\n\
    \            secondAnimal.setFact(competence.getText());\n        } else {\n \
    \           firstAnimal.setFact(competence.getText());\n            secondAnimal.setFact(competence.negate());\n\
    \        }\n    }\n}\n"
  learner_created: true
- name: src/animals/domain/GuessGame.java
  visible: true
  text: |
    package animals.domain;

    public interface GuessGame extends Runnable {

        void greet();
        void guess();

        default void start() {
            greet();
            guess();
        }
    }
  learner_created: true
- name: src/animals/model/Animal.java
  visible: true
  text: |
    package animals.model;

    import animals.domain.DeterminantFactory;

    import java.util.Objects;

    public class Animal {

        private final String name;

        private String fact;

        public Animal(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public String getNameWithDeterminant() {
            return DeterminantFactory.of(getName());
        }

        public String getFact() {
            return fact;
        }

        public void setFact(String fact) {
            this.fact = fact;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Animal)) return false;
            Animal animal = (Animal) o;
            return Objects.equals(getName(), animal.getName()) && Objects.equals(getFact(), animal.getFact());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getName(), getFact());
        }

        @Override
        public String toString() {
            return String.format("- The %s %s", name, fact.endsWith(".") ? fact : fact.concat("."));
        }
    }
  learner_created: true
- name: src/animals/GuessingApplication.java
  visible: true
  text: |
    package animals;
    import animals.core.Guess;
    import animals.domain.GuessGame;
    import animals.domain.GreetFactory;

    public class GuessingApplication implements GuessGame {

        public void greet() {
            System.out.println(GreetFactory.of().getMessage());
        }

        public void guess() {
            Guess.init().guess();
        }

        @Override
        public void run() {
            start();
        }
    }
  learner_created: true
- name: src/animals/domain/DeterminantFactory.java
  visible: true
  text: |
    package animals.domain;

    public class DeterminantFactory {

        /**
         * Determine determinant of given word/text
         * @param text {@link String}
         * @return {@link String} - word with determinant (a/an)
         */
        public static String of(String text) {

            String[] words = text.split("\\s");
            String wordWithDeterminant;
            if (words[0].matches("an?")) {
                wordWithDeterminant = text;
            } else {
                wordWithDeterminant = text.startsWith("the") ? words[1] : text;
                wordWithDeterminant = addDeterminant(wordWithDeterminant);
            }

            return wordWithDeterminant;
        }

        public static String addDeterminant(String word) {
            return String.format("%s %s", startsWithVowel(word) ? "an" : "a", word);
        }

        public static String removeDeterminant(String text) {
            String[] words = text.split("\\s");
            if (words[0].matches("an?")) {
                return words[1];
            } else {
                return text.startsWith("the") ? words[1] : text;
            }
        }

        private static boolean startsWithVowel(String word) {
            return "eaiouy".indexOf(word.charAt(0)) >= 0;
        }
    }
  learner_created: true
- name: src/animals/core/Greet.java
  visible: true
  text: |
    package animals.core;

    public enum Greet {

        MORNING("Good morning!"),
        AFTERNOON("Good afternoon!"),
        EVENING("Good evening!"),
        NIGHT_OWL("Hi, Night Owl"),
        EARLY_BIRD("Hi, Early Bird");

        private final String message;

        Greet(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }
    }
  learner_created: true
- name: src/animals/domain/GreetFactory.java
  visible: true
  text: |
    package animals.domain;

    import animals.core.Greet;

    import java.time.LocalTime;

    public class GreetFactory {

        public static Greet of() {
            LocalTime time = LocalTime.now();
            LocalTime beginOfDay = LocalTime.parse("05:00:00");
            LocalTime eob = LocalTime.parse("18:00:00");
            Greet greet = null;
            if (time.isAfter(beginOfDay) && time.isBefore(LocalTime.NOON)) {
                greet = Greet.MORNING;
            } else if (time.isAfter(LocalTime.NOON) && time.isBefore(eob)) {
                greet = Greet.AFTERNOON;
            } else if (time.isAfter(eob)) {
                greet = Greet.EVENING;
            } else if (time.isAfter(LocalTime.MIDNIGHT) && time.isBefore(beginOfDay)) {
                greet = Greet.NIGHT_OWL;
            } else if (time.isAfter(beginOfDay) && time.getHour() < 9) {
                greet = Greet.EARLY_BIRD;
            }

            return greet;
        }
    }
  learner_created: true
- name: src/animals/domain/QuestionFactory.java
  visible: true
  text: |
    package animals.domain;

    import animals.model.Verb;

    import java.util.concurrent.ThreadLocalRandom;

    import static animals.utils.GuessUtils.CLARIFICATION_QUESTIONS;

    public class QuestionFactory {

        /**
         * Choice a question from {@link animals.utils.GuessUtils#CLARIFICATION_QUESTIONS} randomly
         * @return {@link String} A question
         */
        public static String random() {
            int idx = ThreadLocalRandom.current().nextInt(0, CLARIFICATION_QUESTIONS.size() - 1);

            return CLARIFICATION_QUESTIONS.get(idx);
        }

        /**
         * Replace placeholder from 'Is it correct for %s' by given name
         * @param name {@link String} - name of animal
         * @return {@link String} - Format question for clarifying fact about animal by given name
         */
        public static String correct(String name) {
            return String.format("Is it correct for %s?", name);
        }


        /**
         * Transform fact about animal to a question
         * @param fact {@link String} - Known fact about animal
         * @return {@link String} - Question helping to distinguish an animal
         */
        public static String from(String fact) {

            for (Verb verb : Verb.values()) {
                if (fact.contains(verb.name().toLowerCase())) {
                    fact = fact.replace(verb.name().toLowerCase(), verb.getInterrogation());
                }
            }

            return fact.endsWith(".") ? fact.replace(".", "?") : fact.concat("?");
        }
    }
  learner_created: true
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/guessing-game.data.yaml
  visible: false
  text: |
    #
    # This data file for test the Knowledge Tree
    #
    # Can it climb trees?
    #  yes -> Does it have tassels on his ears?
    #         -> yes -> Lynx
    #         -> no  -> Cat
    #  no  -> Is it living in the forest?
    #         -> yes -> wolf
    #         -> no  -> dog
    #
    ---
    - - |
        yes
        yes
      - a lynx

    - - |
        yes
        no
      - a cat

    - - |
        no
        yes
      - a wolf

    - - |
        no
        no
      - a dog
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/guessing-game.script.yaml
  visible: false
  text: |+
    #
    # This is a scenario for testing of the Guessing Game
    #
    ---
    - [start]

    - - contains
      - I want to learn about animals
      - |
        When the program starts, the knowledge tree is empty.
        The program should express its desire to learn about animals.

    - - contains
      - Which animal do you like
      - To build an initial tree of knowledge, the program must ask the user about his favorite animal.

    - [input, cat]

    - - contains
      - play a game
      - After the user specifying a favorite animal, the program should offer him to play a game.

    - - contains
      - You think of an animal
      - The program must explain the rules of the game to the user.

    - - contains
      - Press enter
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # After user press Enter the game started!
    #

    - - contains
      - Is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.

    - [input, No] # We think of about other animal, not about the cat

    - - contains
      - I give up. What animal do you have in mind?
      - If the program can't guess the animal, it must give up.

    - [input, dog] # Of course, our second animal is a dog!

    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.

    - [input, "it can climb trees"]

    - - contains
      - correct for a dog?
      - The program should clarify if the statement is correct for a dog.

    - [input, no]

    - - contains
      - The cat can climb trees
      - The program must generate the correct fact for the first animal.

    - - find
      - The dog can.t climb tree
      - The program must generate the correct fact for the second animal.

    - - find
      - "(?i)(again|repeat|one more)"
      - The program should invite the user to play this wonderful game again.

    - [input, yes] # Without a doubt, we are playing again!

    - - contains
      - You think of an animal
      - The program must explain the rules of the game to the user.

    - - find
      - Press enter when you.re ready
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # The second game just started!
    #
    # Now in our Knowledge Tree has two animals and one fact.
    #

    - - contains
      - Can it climb trees?
      - After the first game, the starting question should be the question of fact.

    - [input, yes]

    - - contains
      - Is it a cat?
      - The program must assume that the animal is a cat.

    - - input
      - |
        no
        lynx
        it has tassels on his ears
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]

    #
    # The third game just started!
    #
    # Now in our Knowledge Tree has three animals and two fact.
    #

    - - contains
      - Can it climb trees?
      - |
      - The very first fact that the program learns is always the root element.
      - In every game, the question of this fact should be the first question.

    - [input, no] # No, the animal can't climb trees

    - - contains
      - Is it a dog?
      - The program must assume that the animal is a dog.

    - - input
      - |
        no
        wolf
        it is living in the forest
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]
    #
    # The forth game just started!
    #
    # The Knowledge Tree has four animals and tree fact.
    #
    # Now we will use data from the data file to substitute user answers.
    # This will allow us to check the correctness of the tree construction.

    - [input, "{0}"]

    - - contains
      - "Is it {1}?"
      - "The expected animal must be {1}"

    - [input, yes] # The program guessed the animal we conceived

    - [input, no] # We don't want to play anymore

    - - finish
      - If we do not want to play any more, then the program should exit.

  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: src/animals/core/Node.java
  visible: true
  learner_created: true
- name: src/animals/core/BinaryTree.java
  visible: true
  learner_created: true
- name: src/animals/model/Statement.java
  visible: true
  text: |
    package animals.model;

    import java.util.Arrays;
    import java.util.Objects;

    public class Sentence {

        private final String text;

        public Sentence(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }

        public String negate() {
            return Arrays.stream(Verb.values())
                    .filter(verb -> text.contains(verb.name().toLowerCase()))
                    .map(verb -> text.replace(verb.name().toLowerCase(), verb.getNegation()))
                    .findFirst()
                    .orElse(text);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Sentence)) return false;
            Sentence sentence = (Sentence) o;
            return Objects.equals(getText(), sentence.getText());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getText());
        }

        @Override
        public String toString() {
            return "Sentence{" +
                    "sentence='" + text + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/animals/core/Direction.java
  visible: true
  learner_created: true
- name: src/animals/core/Game.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11081#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 08 Apr 2023 11:13:26 UTC
record: 3
