type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/service/Game.java
  visible: true
  text: |
    package animals.service;

    public interface Game {

        boolean load();

        void save();

        void init();

        void play();

        boolean playAgain();

        void sayGoodbye();
    }
  learner_created: true
- name: src/animals/utils/GuessInput.java
  visible: true
  text: |
    package animals.utils;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class GuessInput {

        public static String requestInput(String message) {
            System.out.printf("%s%n", message);
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine().toLowerCase();
        }

        public static String requestFact(String firstAnimal, String secondAnimal) {

            String fact = "";

            while (!getMatcher(fact).find()) {
                fact = getDistinguishingFact(firstAnimal, secondAnimal);
            }

            return fact;
        }

        private static String getDistinguishingFact(String firstAnimal, String secondAnimal) {
            String message = MessageRessource.getInstance().getProperty("guess.game.distinguishing.fact.request.text");
            System.out.printf(message, firstAnimal, secondAnimal);

            return new Scanner(System.in).nextLine().replaceFirst("[!?]", ".");
        }

        public static String answer() {
            return new Scanner(System.in).nextLine().trim().replaceFirst("[.!?]", "").toLowerCase();
        }

        public static String answer(String question) {
            System.out.println(question);
            return answer();
        }

        private static Matcher getMatcher(String fact) {
            final String regex = "It (can|has|is)";

            final Pattern pattern = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
            return pattern.matcher(fact);
        }
    }
  learner_created: true
- name: src/main/resources/messages.properties
  visible: true
  text: |-
    guess.gameSession.start.text=\nI want to learn about animals.
    guess.gameSession.start.tree.loaded.text=\nI know a lot about animals.
    guess.gameSession.start.play.text=\nLet's play a gameSession!
    guess.gameSession.favorite.animal.request.text=Which animal do you like most?
    guess.gameSession.animal.in.mind.request.text=I give up. What animal do you have in mind?
    guess.gameSession.start.ready.text=Wonderful! I've learned so much about animals!
    guess.gameSession.instruction.text=\nYou think of an animal, and I guess it.\nPress enter when you're ready.
    guess.gameSession.play.again.text=Would you like to play again?
    guess.gameSession.facts.learned.text=I learned the following facts about animals:%n%s%nI can distinguish these animals by asking the question:%n- %s%n
    guess.gameSession.learning.finished.text=Nice! I've learned so much about animals!
    guess.gameSession.guessing.correct.text=It's great that I got it right!\nI didn't even hope that it would be possible to guess!
    guess.gameSession.statement.verification.text=Is the statement correct for %s?
    guess.gameSession.loading.failure.text=Loading tree from local storage failed!
    guess.gameSession.save.failure.text=Saving tree from local storage failed!
    guess.gameSession.distinguishing.fact.request.text=Specify a fact that distinguishes %s from %s.\nThe sentence should satisfy one of the following templates:\n- It can ...\n- It has ...\n- It is a/an ...%n

    # Greeting messages
    greeting.morning.text=Good morning!
    greeting.afternoon.text=Good afternoon!
    greeting.evening.text=Good evening!
    greeting.night_owl.text=Hi, Night Owl
    greeting.early_bird.text=Hi, Early Bird

    # Verb
    guess.gameSession.negation.verb.has=doesn't have
    guess.gameSession.interrogation.verb.has=Does it have
    guess.gameSession.negation.verb.is=isn't
    guess.gameSession.interrogation.verb.is=Is it
    guess.gameSession.negation.verb.can=can't
    guess.gameSession.interrogation.verb.can=Can it
  learner_created: true
- name: src/animals/domain/FileFormat.java
  visible: true
  text: |
    package animals.domain;

    import java.util.Arrays;
    import java.util.function.Predicate;

    public enum FileFormat {

        JSON,
        XML,
        YAML;

        public static FileFormat of(String type) {
            return isValidType().test(type) ? FileFormat.valueOf(type.toUpperCase()) : FileFormat.JSON;
        }

        private static Predicate<String> isValidType() {
            return type -> Arrays.stream(values()).anyMatch(format -> type.equalsIgnoreCase(format.name()));
        }
    }
  learner_created: true
- name: src/animals/domain/GuessGameValidator.java
  visible: true
  text: |
    package animals.domain;

    import animals.utils.GuessingData;
    import com.fasterxml.jackson.databind.ObjectMapper;

    import java.io.IOException;
    import java.io.InputStream;
    import java.util.function.Predicate;

    public class GuessGameValidator {

        private static final GuessGameValidator INSTANCE = new GuessGameValidator();

        private GuessingData data;

        private GuessGameValidator() {
            loadData();
        }

        public static GuessGameValidator getInstance() {
            return INSTANCE;
        }

        public GuessingData getData() {
            return data;
        }

        public Predicate<String> isPositivResponse() {
            return data.getPositivesResponses()::contains;
        }

        public Predicate<String> isPositivOrNegativeResponse() {
            return answer -> isPositivResponse().or(isNegativResponse()).test(answer);
        }

        public Predicate<String> isNegativResponse() {
            return data.getNegativesResponses()::contains;
        }

        private void loadData() {
            try (InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("guessing.data.json")) {
                ObjectMapper mapper = new ObjectMapper();
                data = mapper.readValue(inputStream, GuessingData.class);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/animals/service/GuessingGame.java
  visible: true
  text: |
    package animals.service;

    import animals.domain.GuessGameValidator;
    import animals.domain.Determinant;
    import animals.domain.GreetFactory;
    import animals.domain.RandomItem;
    import animals.utils.GuessInput;

    public class GuessingGame implements GameSession {

        private final NodeService nodeService;
        private final GuessGameValidator guessGameValidator = GuessGameValidator.getInstance();

        public GuessingGame(NodeService nodeService) {
            super();
            this.nodeService = nodeService;
        }

        @Override
        public void greet() {
            String key = String.format("greeting.%s.text", GreetFactory.of().name().toLowerCase());
            System.out.println(nodeService.getMessage(key));
        }

        public boolean load() {
            return nodeService.loadRoot();
        }

        public void save() {
            nodeService.saveRoot();
        }

        public void init() {

            if (!load()) {
                System.out.println(nodeService.getMessage("guess.game.start.text"));
                String favoriteAnimal = GuessInput.requestInput(nodeService.getMessage("guess.game.favorite.animal.request.text"));
                nodeService.add(Determinant.add(favoriteAnimal));
                System.out.print(nodeService.getMessage("guess.game.start.ready.text").concat(nodeService.getMessage("guess.game.start.play.text")));
            } else {
                System.out.print(nodeService.getMessage("guess.game.start.tree.loaded.text").concat(nodeService.getMessage("guess.game.start.play.text")));
            }
        }

        public void play() {
            String input = GuessInput.requestInput(nodeService.getMessage("guess.game.instruction.text"));
            nodeService.reset();
            if (input.isBlank()) {

                if (nodeService.isGuessed()) {
                    System.out.println(nodeService.getMessage("guess.game.guessing.correct.text"));
                } else {
                    nodeService.addAnimal();
                }
            }
        }

        public boolean playAgain() {
            return guessGameValidator.isPositivResponse().test(GuessInput.answer(nodeService.getMessage("guess.game.play.again.text")));
        }

        public void sayGoodbye() {
            System.out.println(new RandomItem<>(guessGameValidator.getData().getByeOptions()).next());
        }
    }
  learner_created: true
- name: src/animals/model/Node.java
  visible: true
  text: |
    package animals.model;

    import animals.domain.Determinant;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;

    import java.util.Objects;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Node {

        private String value;
        private Node left;
        private Node right;

        public Node() {
        }

        public Node(String value) {
            this.value = value;
            right = null;
            left = null;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node getLeft() {
            return left;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public Node getRight() {
            return right;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        @JsonIgnore
        public boolean isLeaf() {
            return left == null && right == null;
        }

        @JsonIgnore
        public String Info() {
            final String fact = getValue().replaceFirst("It|it\\s", "").trim();
            Statement statement = new Statement(fact);
            return String.format("%s\n%s", getFormat(getRight(), statement.getText()), getFormat(getLeft(), statement.negate()));
        }

        @JsonIgnore
        private String getFormat(Node leaf, String fact) {
            return String.format("- The %s %s", Determinant.removeAll(leaf.getValue()).trim(),
                    fact.endsWith(".") ? fact : fact.concat("."));
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Node)) return false;
            Node node = (Node) o;
            return Objects.equals(getValue(), node.getValue()) && Objects.equals(getLeft(), node.getLeft()) &&
                    Objects.equals(getRight(), node.getRight());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getValue(), getLeft(), getRight());
        }

        @Override
        public String toString() {
            return "Node{" +
                    "value='" + value + '\'' +
                    ", left=" + left +
                    ", right=" + right +
                    '}';
        }
    }
  learner_created: true
- name: src/animals/domain/Direction.java
  visible: true
  text: |
    package animals.domain;

    public enum Direction {

        LEFT,
        RIGHT
    }
  learner_created: true
- name: src/animals/domain/GreetFactory.java
  visible: true
  text: |
    package animals.domain;

    import java.time.LocalTime;

    public class GreetFactory {

        public static Greet of() {
            LocalTime time = LocalTime.now();
            LocalTime beginOfDay = LocalTime.parse("05:00:00");
            LocalTime eob = LocalTime.parse("18:00:00");
            Greet greet = null;
            if (time.isAfter(beginOfDay) && time.isBefore(LocalTime.NOON)) {
                greet = Greet.MORNING;
            } else if (time.isAfter(LocalTime.NOON) && time.isBefore(eob)) {
                greet = Greet.AFTERNOON;
            } else if (time.isAfter(eob)) {
                greet = Greet.EVENING;
            } else if (time.isAfter(LocalTime.MIDNIGHT) && time.isBefore(beginOfDay)) {
                greet = Greet.NIGHT_OWL;
            } else if (time.isAfter(beginOfDay) && time.getHour() < 9) {
                greet = Greet.EARLY_BIRD;
            }

            return greet;
        }
    }
  learner_created: true
- name: src/animals/service/NodeService.java
  visible: true
  text: |
    package animals.service;

    import animals.domain.Direction;
    import animals.model.Node;

    public interface NodeService {

        void reset();

        void add(String value);

        void addAnimal();

        void addAnimal(Node node, final String statement, final String animal, Direction direction);

        boolean isGuessed();

        String getMessage(String key);

        boolean loadRoot();

        void saveRoot();
    }
  learner_created: true
- name: src/animals/domain/QuestionFactory.java
  visible: true
  text: |
    package animals.domain;

    import animals.utils.MessageRessource;

    public class QuestionFactory {

        private static final MessageRessource MESSAGE_RESSOURCE = MessageRessource.getInstance();

        /**
         * Transform fact about animal to a question
         * @param fact {@link String} - Known fact about animal
         * @return {@link String} - Question helping to distinguish an animal
         */
        public static String from(String fact) {

            String question = fact;

            for (Verb verb : Verb.values()) {
                if (fact.contains(verb.name().toLowerCase())) {
                    question = fact.replace(verb.name().toLowerCase(), MESSAGE_RESSOURCE.getProperty(verb.getInterrogation()));
                    break;
                } else {
                    question = String.join(" ", MESSAGE_RESSOURCE.getProperty(Verb.IS.getInterrogation()), fact);
                }
            }

            return question.endsWith(".") ? question.replace(".", "?") : question.concat("?");
        }
    }
  learner_created: true
- name: src/main/resources/guessing.data.json
  visible: true
  text: |-
    {
      "positivesResponses": [
        "y",
        "yes",
        "yeah",
        "yep",
        "sure",
        "right",
        "affirmative",
        "correct",
        "indeed",
        "you bet",
        "exactly",
        "you said it"
      ],
      "negativesResponses": [
        "n",
        "no",
        "no way",
        "nah",
        "nope",
        "negative",
        "i don't think so",
        "yeah no"
      ],
      "questions": [
        "I'm not sure I caught you: was it yes or no?",
        "Funny, I still don't understand, is it yes or no?",
        "Oh, it's too complicated for me: just tell me yes or no.",
        "Could you please simply say yes or no?",
        "Oh, no, don't try to confuse me: say yes or no."
      ],
      "byeOptions": [
        "Bye!",
        "Goodbye",
        "See you soon!",
        "See you later!",
        "Bye! Have a good day.",
        "Bye! Take care.",
        "Bye! Take it easy.",
        "It was greet to speech with you, but I've to go. Goodbye!"
      ]
    }
  learner_created: true
- name: src/animals/domain/Verb.java
  visible: true
  text: |
    package animals.domain;

    public enum Verb {

        HAS,
        IS,
        CAN;

        public String getNegation() {
            return getMessageKey("guess.game.negation.verb");
        }

        public String getInterrogation() {
            return getMessageKey("guess.game.interrogation.verb");
        }

        private String getMessageKey(String key) {
            return String.format("%s.%s", key, name().toLowerCase());
        }
    }
  learner_created: true
- name: src/animals/domain/RandomItem.java
  visible: true
  text: |
    package animals.domain;

    import java.util.List;
    import java.util.concurrent.ThreadLocalRandom;

    public class RandomItem<T> {

        private final List<T> items;

        public RandomItem(List<T> items) {
            this.items = items;
        }

        public T next() {
            int idx = ThreadLocalRandom.current().nextInt(0, items.size() - 1);

            return items.get(idx);
        }
    }
  learner_created: true
- name: src/animals/utils/MessageRessource.java
  visible: true
  text: |
    package animals.utils;

    import java.util.ResourceBundle;

    public class MessageRessource {

        private static final MessageRessource INSTANCE = new MessageRessource();

        private final ResourceBundle resourceBundle;

        {
            this.resourceBundle = ResourceBundle.getBundle("messages");
        }

        public static MessageRessource getInstance() {
            return INSTANCE;
        }

        public String getProperty(String key) {
            return resourceBundle.getString(key);
        }
    }
  learner_created: true
- name: src/animals/repository/NodeRepository.java
  visible: true
  text: |
    package animals.repository;

    import animals.model.Node;

    import java.io.IOException;

    public interface NodeRepository {

        Node load() throws IOException;

        void save(Node root) throws IOException;
    }
  learner_created: true
- name: src/animals/service/NodeServiceImpl.java
  visible: true
  text: |
    package animals.service;

    import animals.domain.GuessGameValidator;
    import animals.domain.Direction;
    import animals.utils.MessageRessource;
    import animals.domain.Determinant;
    import animals.domain.QuestionFactory;
    import animals.domain.RandomItem;
    import animals.model.Node;
    import animals.repository.NodeRepository;
    import animals.utils.GuessInput;

    import java.io.IOException;

    public class NodeServiceImpl implements NodeService {

        private Node root;

        private Node current;

        private final NodeRepository nodeRepository;

        private final MessageRessource messageRessource;

        private final GuessGameValidator guessGameValidator = GuessGameValidator.getInstance();

        {
            messageRessource = MessageRessource.getInstance();
        }

        public NodeServiceImpl(NodeRepository nodeRepository) {
            super();
            this.nodeRepository = nodeRepository;
        }

        public void reset() {
            current = root;
        }

        public void add(String value) {
            root = addRecursive(root, value);
        }

        private Node addRecursive(Node current, String value) {
            if (current.getValue() == null && current.isLeaf()) {
                return new Node(value);
            }

            if (value.compareToIgnoreCase(current.getValue()) < 0) {
                current.setLeft(addRecursive(current.getLeft(), value));
            } else if (value.compareToIgnoreCase(current.getValue()) > 0) {
                current.setRight(addRecursive(current.getRight(), value));
            } else {
                // value already exists
                return current;
            }

            return current;
        }

        public void addAnimal() {
            String animal = Determinant.add(GuessInput.requestInput(getMessage("guess.game.animal.in.mind.request.text")));

            String sentence = GuessInput.requestFact(current.getValue(), animal).replaceFirst("[!?]", ".");

            String answer = getAnswer(String.format(getMessage("guess.game.statement.verification.text"), animal));

            Direction direction = guessGameValidator.isPositivResponse().test(answer) ? Direction.RIGHT : Direction.LEFT;
            addAnimal(current, sentence, animal, direction);

            String question = QuestionFactory.from(sentence.replaceFirst("It|it ", "")).trim();

            System.out.printf(getMessage("guess.game.facts.learned.text").concat("\n"), current.Info(), question);

            System.out.println(getMessage("guess.game.learning.finished.text"));
        }

        public void addAnimal(Node node, final String statement, final String animal, Direction direction) {
            final var newAnimal = new Node(animal);
            final var oldAnimal = new Node(node.getValue());

            boolean isRight = Direction.RIGHT.equals(direction);

            node.setValue(statement);
            node.setRight(isRight ? newAnimal : oldAnimal);
            node.setLeft(isRight ? oldAnimal : newAnimal);
        }

        public boolean isGuessed() {
            return guessGameValidator.isPositivResponse().test(askQuestion(root));
        }

        private String askQuestion(Node root) {

            if (root.isLeaf()) {
                this.current = root;
                return getAnswer(QuestionFactory.from(root.getValue()).trim());
            } else {
                boolean answer = guessGameValidator.isPositivResponse()
                        .test(getAnswer(QuestionFactory.from(root.getValue()).replaceFirst("It", "").trim()));

                return answer ? askQuestion(root.getRight()) : askQuestion(root.getLeft());
            }
        }

        public String getAnswer(String question) {

            String answer = GuessInput.answer(question);

            while (guessGameValidator.isPositivOrNegativeResponse().negate().test(answer)) {
                answer = GuessInput.answer(new RandomItem<>(guessGameValidator.getData().getQuestions()).next());
            }

            return answer;
        }

        @Override
        public String getMessage(String key) {
            return messageRessource.getProperty(key);
        }

        public boolean loadRoot() {
            try {
                root = nodeRepository.load();
            } catch (IOException e) {
                System.out.println(getMessage("guess.game.loading.failure.text"));
                root = new Node();
            }

            return !root.isLeaf();
        }

        public void saveRoot() {
            try {
                nodeRepository.save(root);
            } catch (IOException e) {
                System.out.println(getMessage("guess.game.save.failure.text"));
            }
        }
    }
  learner_created: true
- name: src/animals/utils/GuessingData.java
  visible: true
  text: |
    package animals.utils;

    import java.util.List;
    import java.util.Objects;

    @SuppressWarnings("unused")
    public class GuessingData {

        private List<String> positivesResponses;
        private List<String> negativesResponses;
        private List<String> questions;
        private List<String> byeOptions;

        public GuessingData() {
        }

        public List<String> getPositivesResponses() {
            return positivesResponses;
        }

        public void setPositivesResponses(List<String> positivesResponses) {
            this.positivesResponses = positivesResponses;
        }

        public List<String> getNegativesResponses() {
            return negativesResponses;
        }

        public void setNegativesResponses(List<String> negativesResponses) {
            this.negativesResponses = negativesResponses;
        }

        public List<String> getQuestions() {
            return questions;
        }

        public void setQuestions(List<String> questions) {
            this.questions = questions;
        }

        public List<String> getByeOptions() {
            return byeOptions;
        }

        public void setByeOptions(List<String> byeOptions) {
            this.byeOptions = byeOptions;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof GuessingData)) return false;
            GuessingData that = (GuessingData) o;
            return Objects.equals(getPositivesResponses(), that.getPositivesResponses()) && Objects.equals(getNegativesResponses(), that.getNegativesResponses()) && Objects.equals(getQuestions(), that.getQuestions()) && Objects.equals(getByeOptions(), that.getByeOptions());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getPositivesResponses(), getNegativesResponses(), getQuestions(), getByeOptions());
        }


    }
  learner_created: true
- name: animal.json
  visible: true
  text: |-
    {
      "value" : "It can climbs tree",
      "left" : {
        "value" : "a dog"
      },
      "right" : {
        "value" : "It is living in the forest",
        "left" : {
          "value" : "a cat"
        },
        "right" : {
          "value" : "a lynx"
        }
      }
    }
  learner_created: true
- name: src/animals/GuessGameApplication.java
  visible: true
  text: |
    package animals;
    import animals.service.GameSession;

    public class GuessGameApplication implements Runnable {

        private final GameSession gameSession;

        public GuessGameApplication(GameSession gameSession) {
            this.gameSession = gameSession;
        }

        protected void greet() {
            gameSession.greet();
        }

        protected void guess() {
            gameSession.guess();
        }

        @Override
        public void run() {
            start();
        }

        private void start() {
            greet();
            guess();
        }
    }
  learner_created: true
- name: src/animals/domain/Greet.java
  visible: true
  text: |
    package animals.domain;

    public enum Greet {

        MORNING,
        AFTERNOON,
        EVENING,
        NIGHT_OWL,
        EARLY_BIRD;
    }
  learner_created: true
- name: src/animals/model/Statement.java
  visible: true
  text: |
    package animals.model;

    import animals.domain.Verb;
    import animals.utils.MessageRessource;

    import java.util.Arrays;
    import java.util.Objects;

    public class Statement {

        private final String text;

        public Statement(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }

        public String negate() {
            return Arrays.stream(Verb.values())
                    .filter(verb -> text.contains(verb.name().toLowerCase()))
                    .map(verb -> text.replace(verb.name().toLowerCase(), MessageRessource.getInstance().getProperty(verb.getNegation())))
                    .findFirst()
                    .orElse(text);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Statement)) return false;
            Statement statement = (Statement) o;
            return Objects.equals(getText(), statement.getText());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getText());
        }

        @Override
        public String toString() {
            return "Sentence{" +
                    "sentence='" + text + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/animals/service/GameSession.java
  visible: true
  text: |
    package animals.service;

    public interface GameSession extends Game {

        void greet();

        default void guess() {
            init();

            do {
                play();
            } while (playAgain());

            save();

            sayGoodbye();
        }
    }
  learner_created: true
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: src/animals/domain/MenuItem.java
  visible: true
  learner_created: true
- name: src/animals/command/Command.java
  visible: true
  learner_created: true
- name: src/animals/command/CommandFactory.java
  visible: true
  learner_created: true
- name: src/animals/command/PlayCommand.java
  visible: true
  learner_created: true
- name: src/animals/command/ExitCommand.java
  visible: true
  learner_created: true
- name: src/animals/command/ListCommand.java
  visible: true
  learner_created: true
- name: src/animals/command/SearchCommand.java
  visible: true
  learner_created: true
- name: src/animals/domain/GuessingGameMenu.java
  visible: true
  learner_created: true
- name: src/animals/model/BinaryTree.java
  visible: true
  learner_created: true
- name: src/animals/command/StatisticCommand.java
  visible: true
  learner_created: true
- name: src/animals/command/PrintCommand.java
  visible: true
  learner_created: true
- name: src/animals/model/TreeStats.java
  visible: true
  learner_created: true
- name: src/animals/domain/ArticleFactory.java
  visible: true
  text: |
    package animals.domain;

    import java.util.Arrays;

    public enum Determinant {
        A,
        AN,
        THE;

        private static String of(String word) {
            final Determinant determinant = startsWithVowel(word) ? Determinant.AN : Determinant.A;
            return determinant.name().toLowerCase();
        }

        public static boolean startsWithVowel(String word) {
            return "eaiouy".indexOf(word.charAt(0)) >= 0;
        }

        public static String addDeterminant(String word) {
            return String.format("%s %s", Determinant.of(word), word);
        }

        /**
         * Determine determinant of given word/text
         * @param text {@link String}
         * @return {@link String} - word with determinant (a/an)
         */
        public static String add(String text) {

            String[] words = text.toLowerCase().split("\\s");
            String wordWithDeterminant;
            if (words[0].matches(AN.name().toLowerCase().concat("?"))) {
                wordWithDeterminant = text;
            } else {
                wordWithDeterminant = text.startsWith(THE.name().toLowerCase()) ? words[1] : text;
                wordWithDeterminant = Determinant.addDeterminant(wordWithDeterminant);
            }

            return wordWithDeterminant;
        }

        public static String removeAll(String text) {
            return Arrays.stream(values())
                    .map(Enum::name)
                    .map(String::toLowerCase)
                    .filter(text::startsWith).findFirst()
                    .map(determinant -> text.replaceFirst(determinant, "").trim())
                    .orElse(text.trim());

        }
    }
  learner_created: true
- name: src/animals/domain/TreeLoader.java
  visible: true
  text: |
    package animals.domain;

    import animals.model.Node;
    import animals.repository.NodeRepository;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.json.JsonMapper;
    import com.fasterxml.jackson.dataformat.xml.XmlMapper;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

    import java.io.File;
    import java.io.IOException;

    public class FileLoader implements NodeRepository {

        private final ObjectMapper objectMapper;

        private final String filename;

        private FileLoader(FileFormat format) {
            this.objectMapper = getObjectMapper(format);
            this.filename = "animals.".concat(format.name().toLowerCase());
        }

        public static NodeRepository of(FileFormat format) {
            return new FileLoader(format);
        }

        public Node load() throws IOException {
            return objectMapper.readValue(new File(filename), Node.class);
        }

        private ObjectMapper getObjectMapper(FileFormat format) {
            switch (format) {
                case XML:
                   return new XmlMapper();
                case YAML:
                    return new YAMLMapper();
                default:
                    return new JsonMapper();
            }
        }

        public void save(Node root) throws IOException {
            objectMapper
                    .writerWithDefaultPrettyPrinter()
                    .writeValue(new File(filename), root);

        }
    }
  learner_created: true
- name: src/animals/domain/TreeTraversal.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11083#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 14 Apr 2023 02:02:03 UTC
record: -1
