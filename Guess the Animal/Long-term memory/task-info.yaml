type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "file-formats"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) {
            return new Scenario(script).check();
        }

        @DynamicTest
        CheckResult testFileFormats() {
            deleteTestFiles();
            final var result = new Scenario("file-formats").check();
            deleteTestFiles();
            return result;
        }

        private void deleteTestFiles() {
            Stream.of("yaml", "json", "xml")
                    .map("animals."::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: src/animals/utils/GuessInput.java
  visible: true
  text: |
    package animals.utils;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class GuessInput {

        public static String requestInput(String message) {
            System.out.printf("%s%n", message);
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine().toLowerCase();
        }

        public static String requestFact(String firstAnimal, String secondAnimal) {

            String fact = "";

            while (!getMatcher(fact).find()) {
                fact = getDistinguishingFact(firstAnimal, secondAnimal);
            }

            return fact;
        }

        private static String getDistinguishingFact(String firstAnimal, String secondAnimal) {
            String message = "Specify a fact that distinguishes %s from %s.\n" +
                    "The sentence should satisfy one of the following templates:\n" +
                    "- It can ...\n- It has ...\n- It is a/an ...%n";
            System.out.printf(message, firstAnimal, secondAnimal);

            return new Scanner(System.in).nextLine().replaceFirst("[!?]", ".");
        }

        public static String answer() {
            return new Scanner(System.in).nextLine().trim().replaceFirst("[.!?]", "").toLowerCase();
        }

        private static Matcher getMatcher(String fact) {
            final String regex = "It (can|has|is)";

            final Pattern pattern = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
            return pattern.matcher(fact);
        }
    }
  learner_created: true
- name: src/animals/domain/GreetFactory.java
  visible: true
  text: |
    package animals.domain;

    import animals.core.Greet;

    import java.time.LocalTime;

    public class GreetFactory {

        public static Greet of() {
            LocalTime time = LocalTime.now();
            LocalTime beginOfDay = LocalTime.parse("05:00:00");
            LocalTime eob = LocalTime.parse("18:00:00");
            Greet greet = null;
            if (time.isAfter(beginOfDay) && time.isBefore(LocalTime.NOON)) {
                greet = Greet.MORNING;
            } else if (time.isAfter(LocalTime.NOON) && time.isBefore(eob)) {
                greet = Greet.AFTERNOON;
            } else if (time.isAfter(eob)) {
                greet = Greet.EVENING;
            } else if (time.isAfter(LocalTime.MIDNIGHT) && time.isBefore(beginOfDay)) {
                greet = Greet.NIGHT_OWL;
            } else if (time.isAfter(beginOfDay) && time.getHour() < 9) {
                greet = Greet.EARLY_BIRD;
            }

            return greet;
        }
    }
  learner_created: true
- name: src/animals/model/Statement.java
  visible: true
  text: |
    package animals.model;

    import java.util.Arrays;
    import java.util.Objects;

    public class Statement {

        private final String text;

        public Statement(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }

        public String negate() {
            return Arrays.stream(Verb.values())
                    .filter(verb -> text.contains(verb.name().toLowerCase()))
                    .map(verb -> text.replace(verb.name().toLowerCase(), verb.getNegation()))
                    .findFirst()
                    .orElse(text);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Statement)) return false;
            Statement statement = (Statement) o;
            return Objects.equals(getText(), statement.getText());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getText());
        }

        @Override
        public String toString() {
            return "Sentence{" +
                    "sentence='" + text + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/animals/domain/QuestionFactory.java
  visible: true
  text: |
    package animals.domain;

    import animals.model.Verb;

    import java.util.concurrent.ThreadLocalRandom;

    import static animals.utils.GuessUtils.CLARIFICATION_QUESTIONS;

    public class QuestionFactory {

        /**
         * Choice a question from {@link animals.utils.GuessUtils#CLARIFICATION_QUESTIONS} randomly
         * @return {@link String} A question
         */
        public static String random() {
            int idx = ThreadLocalRandom.current().nextInt(0, CLARIFICATION_QUESTIONS.size() - 1);

            return CLARIFICATION_QUESTIONS.get(idx);
        }

        /**
         * Replace placeholder from 'Is it correct for %s' by given name
         * @param name {@link String} - name of animal
         * @return {@link String} - Format question for clarifying fact about animal by given name
         */
        public static String correct(String name) {
            return String.format("Is the statement correct for %s?", name);
        }


        /**
         * Transform fact about animal to a question
         * @param fact {@link String} - Known fact about animal
         * @return {@link String} - Question helping to distinguish an animal
         */
        public static String from(String fact) {

            String question = fact;

            for (Verb verb : Verb.values()) {
                if (fact.contains(verb.name().toLowerCase())) {
                    question = fact.replace(verb.name().toLowerCase(), verb.getInterrogation());
                    break;
                } else {
                    question = String.join(" ", Verb.IS.getInterrogation(), fact);
                }
            }

            return question.endsWith(".") ? question.replace(".", "?") : question.concat("?");
        }
    }
  learner_created: true
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [matches, "(?si).*animal.*", The program should asks the user for a favourite animal]
    - [input, cat]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, Yes]
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    - - file exists
      - "animals.{0}"
      - When the program started with option "java -type {0}" the data should be saved to "animals.{0}"

    #
    # Start the program again and load the Knowledge Tree
    #

    - [start, "-type {0}"]
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""]
    #
    # The third game started. Test for the Knowledge Tree.
    #
    - - contains
      - Can it climbs tree?
      - The root question in knowledge tree should be "Can it climbs tree?"
    - [input, yes]
    - - contains
      - Is it living in the forest?
      - The second question should be 'Is it living in the forest?'
    - [input, sure]
    - - contains
      - Is it a lynx?
      - The last question should be 'Is it a lynx?'
    - [input, right]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    #
    # Clear workspace after the test
    #
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."

  learner_created: false
- name: src/main/resources/messages.properties
  visible: true
  learner_created: true
- name: src/animals/utils/GuessingData.java
  visible: true
  learner_created: true
- name: src/main/resources/guessing.data.json
  visible: true
  learner_created: true
- name: src/animals/domain/RandomItem.java
  visible: true
  learner_created: true
- name: src/animals/GuessGameApplication.java
  visible: true
  text: |
    package animals;
    import animals.core.Guess;
    import animals.domain.GuessGame;
    import animals.domain.GreetFactory;

    public class GuessingApplication implements GuessGame {

        public void greet() {
            System.out.println(GreetFactory.of().getMessage());
        }

        public void guess() {
            Guess.init().guess();
        }

        @Override
        public void run() {
            start();
        }
    }
  learner_created: true
- name: src/animals/model/Node.java
  visible: true
  text: |
    package animals.core;

    import animals.domain.DeterminantFactory;
    import animals.model.Statement;

    import java.util.Objects;

    public class Node {

        private String value;
        private Node left;
        private Node right;

        Node(String value) {
            this.value = value;
            right = null;
            left = null;
        }

        public String getValue() {
            return value;
        }


        public void setValue(String value) {
            this.value = value;
        }

        public Node getLeft() {
            return left;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public Node getRight() {
            return right;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public boolean isLeaf() {
            return left == null && right == null;
        }

        public String Info() {
            final String fact = getValue().replaceFirst("It|it\\s", "");
            Statement statement = new Statement(fact);
            return String.format("%s\n%s", getFormat(getRight(), statement.getText()),
                    getFormat(getLeft(), statement.negate()));
        }

        private String getFormat(Node leaf, String fact) {
            return String.format("- The %s %s",
                    DeterminantFactory.removeDeterminant(leaf.getValue(), "the", "a", "an").trim(),
                    fact.endsWith(".") ? fact : fact.concat("."));
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Node)) return false;
            Node node = (Node) o;
            return Objects.equals(getValue(), node.getValue()) && Objects.equals(getLeft(), node.getLeft()) && Objects.equals(getRight(), node.getRight());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getValue(), getLeft(), getRight());
        }

        @Override
        public String toString() {
            return "Node{" +
                    "value='" + value + '\'' +
                    ", left=" + left +
                    ", right=" + right +
                    '}';
        }
    }
  learner_created: true
- name: src/animals/domain/FileFormat.java
  visible: true
  learner_created: true
- name: src/animals/domain/FileLoader.java
  visible: true
  learner_created: true
- name: animal.json
  visible: true
  learner_created: true
- name: src/animals/repository/NodeRepository.java
  visible: true
  learner_created: true
- name: src/animals/domain/Determinant.java
  visible: true
  learner_created: true
- name: src/animals/service/NodeService.java
  visible: true
  text: |
    package animals.core;

    public class BinaryTree {

        private Node root;
        private Node current;

        public Node getRoot() {
            return root;
        }

        public Node getCurrent() {
            return current;
        }

        public void setCurrent(Node current) {
            this.current = current;
        }

        public void add(String value) {
            root = addRecursive(root, value);
        }

        private Node addRecursive(Node current, String value) {
            if (current == null) {
                return new Node(value);
            }

            if (value.compareToIgnoreCase(current.getValue()) < 0) {
                current.setLeft(addRecursive(current.getLeft(), value));
            } else if (value.compareToIgnoreCase(current.getValue()) > 0) {
                current.setRight(addRecursive(current.getRight(), value));
            } else {
                // value already exists
                return current;
            }

            return current;
        }

        public void addAnimal(final String statement, final String animal, Direction direction) {
            final var newAnimal = new Node(animal);
            final var oldAnimal = new Node(current.getValue());

            current.setValue(statement);
            current.setRight(isRight(direction) ? newAnimal : oldAnimal);
            current.setLeft(isRight(direction) ? oldAnimal : newAnimal);
        }

        public void reset() {
            current = root;
        }

        private boolean isRight(Direction direction) {
            return Direction.RIGHT.equals(direction);
        }
    }
  learner_created: true
- name: src/animals/service/NodeServiceImpl.java
  visible: true
  learner_created: true
- name: src/animals/domain/GuessGameValidator.java
  visible: true
  text: |
    package animals.core;

    import java.util.function.Predicate;

    import static animals.utils.GuessUtils.NEGATIVE_ANSWERS;
    import static animals.utils.GuessUtils.POSITIVE_RESPONSES;

    public class AnswerValidator {

        public static Predicate<String> isPositivResponse() {
            return POSITIVE_RESPONSES::contains;
        }

        public static Predicate<String> isPositivOrNegativeResponse() {
            return answer -> POSITIVE_RESPONSES.contains(answer) || NEGATIVE_ANSWERS.contains(answer);
        }
    }
  learner_created: true
- name: src/animals/utils/MessageRessource.java
  visible: true
  learner_created: true
- name: src/animals/domain/Direction.java
  visible: true
  text: |
    package animals.core;

    public enum Direction {

        LEFT,
        RIGHT
    }
  learner_created: true
- name: src/animals/domain/Greet.java
  visible: true
  text: |
    package animals.core;

    public enum Greet {

        MORNING("Good morning!"),
        AFTERNOON("Good afternoon!"),
        EVENING("Good evening!"),
        NIGHT_OWL("Hi, Night Owl"),
        EARLY_BIRD("Hi, Early Bird");

        private final String message;

        Greet(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }
    }
  learner_created: true
- name: src/animals/domain/Verb.java
  visible: true
  text: |
    package animals.model;

    public enum Verb {

        HAS ("doesn't have", "Does it have"),
        IS ("isn't", "Is it"),
        CAN ("can't", "Can it");

        Verb(String negation, String interrogation) {
            this.negation = negation;
            this.interrogation = interrogation;
        }

        private final String negation;
        private final String interrogation;

        public String getNegation() {
            return negation;
        }

        public String getInterrogation() {
            return interrogation;
        }
    }
  learner_created: true
- name: src/animals/service/GameSession.java
  visible: true
  learner_created: true
- name: src/animals/service/GuessingGame.java
  visible: true
  text: |
    package animals.core;

    import animals.domain.DeterminantFactory;
    import animals.domain.QuestionFactory;
    import animals.utils.GuessInput;
    import animals.utils.GuessUtils;

    public class Game implements Runnable {

        private final BinaryTree tree;

        public Game(BinaryTree tree) {
            this.tree = tree;
        }

        @Override
        public void run() {

            System.out.println("\nI want to learn about animals.");
            String favoriteAnimal = GuessInput.requestInput("Which animal do you like most?");
            tree.add(DeterminantFactory.of(favoriteAnimal));
            System.out.print("Wonderful! I've learned so much about animals!\nLet's play a game!");

            do {
                String input = GuessInput.requestInput("You think of an animal, and I guess it.\nPress enter when you're ready.");
                tree.reset();
                if (input.isBlank()) {

                    if (isCorrect()) {
                        System.out.println("It''s great that I got it right!\\f\\\n" +
                                "    I didn’t even hope that it would be possible to guess!");
                    } else {
                        String animal = DeterminantFactory.of(GuessInput.requestInput("I give up. What animal do you have in mind?"));

                        String sentence = GuessInput.requestFact(tree.getCurrent().getValue(), animal).replaceFirst("[!?]", ".");

                        String answer = getAnswer(QuestionFactory.correct(animal));

                        tree.addAnimal(sentence, animal, AnswerValidator.isPositivResponse().test(answer) ? Direction.RIGHT : Direction.LEFT);

                        String question = QuestionFactory.from(sentence.replaceFirst("It|it ", ""));

                        System.out.printf("I learned the following facts about animals:%n%s%n" +
                                        "I can distinguish these animals by asking the question:%n- %s%n\n",
                                tree.getCurrent().Info(), question);

                        System.out.println("Nice! I've learned so much about animals!");
                    }
                }

            } while (playAgain());

            System.out.println(GuessUtils.getGoodbyeMessage());
        }

        private String askQuestion(Node root) {

            if (root.isLeaf()) {
                tree.setCurrent(root);
                return getAnswer(QuestionFactory.from(root.getValue()).trim());
            } else {
                boolean answer = AnswerValidator.isPositivResponse()
                        .test(getAnswer(QuestionFactory.from(root.getValue()).replaceFirst("It", "").trim()));

                return answer ? askQuestion(root.getRight()) : askQuestion(root.getLeft());
            }
        }

        private boolean isCorrect() {
            return AnswerValidator.isPositivResponse().test(askQuestion(tree.getRoot()));
        }

        private boolean playAgain() {
            System.out.println("\nWould you like to play again?");
            return AnswerValidator.isPositivResponse().test(GuessInput.answer());
        }

        private String getAnswer(String question) {

            System.out.println(question);

            String answer = GuessInput.answer();

            while (AnswerValidator.isPositivOrNegativeResponse().negate().test(answer)) {
                System.out.println(QuestionFactory.random());
                answer = GuessInput.answer();
            }

            return answer;
        }
    }
  learner_created: true
- name: src/animals/service/Game.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11082#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 09 Apr 2023 18:21:51 UTC
record: 4
